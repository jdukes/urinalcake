* <2014-01-15 Wed>-<2014-02-01 Sat> [0%] Organize code base in to seperate files
  1. [ ] [0%] Move all c related stuff in to a directory 
     + [ ] Move defines in to a defines file
     + [ ] Move ctypes structs, error handlers, etc in to a file
     + [ ] [%] Create generic system
       + [ ] move all arch specific stuff in to a subdir wich with
         each arch as a file. General will be an abstraction layer.
       + [ ] ArchSpecificProcess will be a metaclass. 
       + [ ] OsSpecificProcess will inherit from Arch (only support
         linux for now)
  2. [ ] Move C interface helper functions to a file
  3. [ ] Move all meta programming stuff in to a dir named framework
  4. [ ] Move MemMap and Memory to memory.py
  5. [ ] Move Process classes to process.py
  6. [ ] put attach, seize, and lauch_traced in __init__.py
* <2014-02-01 Sat>-<2014-02-15 Sat> [0%] Add unit testing for all functionality
  1. [ ] def errcheck(ret, func, args):
  2. [0%] class Siginfo(ctypes.Structure):
     + [ ] def __repr__(self):
  3. [0%] class Regs(ctypes.Structure):
     + [ ] def __init__(self, *args, **kwargs):
     + [ ] def __repr__(self):
     + [ ] def get_agnostic(self, name):
  4. [0%] class FPRegs(ctypes.Structure):
     + [ ] def __repr__(self):
  5. [ ] def set_x86_regnames(prefix):
  6. [ ] def _dump_mem(pid, addr, num_bytes):
  7. [ ] def _attach(pid):
  8. [ ] def _detach(pid):
  9. [ ] def _peek_data(pid, addr):
  10. [ ] def _peek_user(pid, addr):
  11. [ ] def _getregs(pid):
  12. [ ] def _setregs(pid, regs):
  13. [ ] def _getfpregs(pid):
  14. [ ] def _get_siginfo(pid):
  15. [ ] def _set_siginfo(pid, sig):
  16. [ ] def _continue(pid):
  17. [ ] def _next_syscall(pid):
  18. [ ] def _single_step(pid):
  19. [ ] def _kill(pid):
  20. [ ] def _interrupt(pid):
  21. [0%] class Live(object):
      + [ ] def __init__(self, name=None):
      + [ ] def __get__(self, instance, objtype):
      + [ ] def __set__(self, instance, val):
  22. [ ] def advance(fn):
      + [ ] def update_and_invalidate(cls, *args, **kwargs):
  23. [0%] class Permissions:
      + [ ] def __init__(self, perms_string):
      + [ ] def __repr__(self):
  24. [0%] class MemMap(list):
      + [ ] def __init__(self, process):
      + [ ] def get_stack(self):
      + [ ] def get_addr_in_maps(self, addr):
  25. [0%] class Memory:
      + [ ] def __init__(self, process, mapsline):
      + [ ] def contains_addr(self, addr):
      + [ ] def __repr__(self):
      + [ ] def read(self, num_bytes=None):
      + [ ] def read_from_frame(self, num_bytes=None):
  26. [0%] class Process:
      + [ ] def __init__(self, pid):
      + [ ] def iter_step(self):
      + [ ] def iter_syscall(self):
      + [ ] def cont(self):
      + [ ] def next_syscall(self):
      + [ ] def step(self):
      + [ ] def get_signal(self):
      + [ ] def _update_attr(self, attr):
      + [ ] def _invalidate_attr(self, attr):
      + [ ] def _set_regs(self):
      + [ ] def detach(self):
      + [ ] def wait(self):
      + [ ] def stop(self):
      + [ ] def read_from_frame(self, num_bytes):
      + [ ] def _syscall_info(self):
      + [ ] def _syscall_info(self):
  27. [ ] def trace(pid):
* <2014-02-15 Sat>-<2014-03-01 Sat> [%] Extend functionality <- may be too short
  - [ ] Add arm register support
  - [ ] fix syscall checking
  - [ ] Add syscall decorators
* <2014-03-01 Sat>-<2014-03-08 Sat> [%] Prove usefulness
  - [ ] write example code to change 
  - [ ] write example code that changes execve before it's called in
    under 10 lines of code
